ACCOUNT=nandyio
IMAGE=people-api
VERSION=0.1
NAME=$(IMAGE)-$(ACCOUNT)
NETWORK=klot.io
VOLUMES=-v ${PWD}/secret/:/opt/service/secret/ \
		-v ${PWD}/lib/:/opt/service/lib/ \
		-v ${PWD}/test/:/opt/service/test/ \
		-v ${PWD}/bin/:/opt/service/bin/
ENVIRONMENT=-e SLEEP=0.1 \
			-e MYSQL_HOST=mysql-klotio \
			-e MYSQL_PORT=3306 \
			-e REDIS_HOST=redis-klotio \
			-e REDIS_PORT=6379 \
			-e REDIS_CHANNEL=nandy.io/people \
			-e NODE_NAME=roam-klot-io.local \
			-e PYTHONUNBUFFERED=1
PORT=8065

.PHONY: cross build kube network shell test db run start stop push install update remove reset tag

cross:
	docker run --rm --privileged multiarch/qemu-user-static:register --reset

build:
	docker build . -t $(ACCOUNT)/$(IMAGE):$(VERSION)

network:
	-docker network create $(NETWORK)

shell: network
	-docker run -it --rm --name=$(NAME) --network=$(NETWORK) $(VOLUMES) $(ENVIRONMENT) -e DATABASE=nandy_people_test $(ACCOUNT)/$(IMAGE):$(VERSION) sh

test: network
	docker run -it --network=$(NETWORK) $(VOLUMES) $(ENVIRONMENT) -e DATABASE=nandy_people_test $(ACCOUNT)/$(IMAGE):$(VERSION) sh -c "coverage run -m unittest discover -v test && coverage report -m --include 'lib/*.py'"

db:
	docker run -it --network=$(NETWORK) $(VOLUMES) $(ENVIRONMENT) $(ACCOUNT)/$(IMAGE):$(VERSION) sh -c "bin/db.py"

run: network
	docker run --rm --name=$(NAME) --network=$(NETWORK) $(VOLUMES) -v ${PWD}/config/:/opt/service/config/ $(ENVIRONMENT) -p 127.0.0.1:$(PORT):80 --expose=80 $(ACCOUNT)/$(IMAGE):$(VERSION)

start: network
	docker run -d --name=$(NAME) --network=$(NETWORK) $(VOLUMES) -v ${PWD}/config/:/opt/service/config/ $(ENVIRONMENT) -p 127.0.0.1:$(PORT):80 --expose=80 $(ACCOUNT)/$(IMAGE):$(VERSION)

stop:
	docker rm -f $(NAME)

push:
	docker push $(ACCOUNT)/$(IMAGE):$(VERSION)

install:
	kubectl create -f kubernetes/mysql.yaml
	kubectl create -f kubernetes/api.yaml

update:
	kubectl replace -f kubernetes/api.yaml

remove:
	-kubectl delete -f kubernetes/api.yaml
	-kubectl delete -f kubernetes/mysql.yaml

reset: remove install

tag:
	-git tag -a "v$(VERSION)" -m "Version $(VERSION)"
	git push origin --tags
